---
import "../styles/global.css";
const whatsappNumber = "+573019030729";
const mapsAddress = "Calle 70# 52D-36, Itagüí, Antioquia";
const mapsQuery = encodeURIComponent(mapsAddress);
---

<section
  id="contact"
  class="py-20 md:py-28 bg-white/15 backdrop-blur-md rounded-2xl p-8 max-w-6xl mx-auto mt-10 shadow-lg text-[#22223b]"
>
  <h2 class="text-3xl font-bold mb-10 text-center text-white">Contáctanos</h2>

  <div class="grid grid-cols-1 md:grid-cols-2 gap-10 items-start">
    <!-- Columna izquierda: Ubicación -->
    <div class="space-y-4">
      <h3 class="text-xl font-semibold text-white">Ubicación:</h3>
      <p class="text-white/80">Calle 70# 52D-36, Itagüí - Antioquia</p>
      <iframe
        src={`https://www.google.com/maps?q=${mapsQuery}&output=embed`}
        width="100%"
        height="300"
        class="border-0 rounded-xl shadow-md"
        allowfullscreen
        loading="lazy"
        referrerpolicy="no-referrer-when-downgrade"
      ></iframe>
    </div>

    <!-- Columna derecha: Formulario -->
    <form id="contactForm" class="flex flex-col gap-4">
      <label class="flex flex-col gap-1">
        Nombre:
        <input
          type="text"
          name="name"
          required
          class="rounded-lg p-3 bg-[#22223b]/10 text-white text-base outline-none"
        />
      </label>

      <label class="flex flex-col gap-1">
        Ubicación:
        <input
          type="text"
          name="location"
          required
          class="rounded-lg p-3 bg-[#22223b]/10 text-white text-base outline-none"
        />
      </label>

      <!-- Productos dinámicos -->
      <div id="productos-container" class="space-y-3">
        <label class="flex flex-col gap-1">
          Productos:
          <div class="producto flex gap-2">
            <select
              name="producto[]"
              required
              class="rounded-lg p-3 bg-[#22223b]/10 text-[#22223b] text-base outline-none flex-1"
            >
              <option value="">Selecciona tu producto</option>
              <option value="Aipods Pro 2">Airpods Pro 2</option>
              <option value="P9 Pro Max">P9 Pro Max</option>
              <option value="Smartwatch 10 Ultra 2-GS">Smartwatch 10 Ultra 2-GS</option>
              <option value="Cargador de Iphone">Cargador de Iphone</option>
            </select>

            <input
              type="number"
              name="cantidad[]"
              min="1"
              value="1"
              required
              class="w-24 rounded-lg p-3 bg-[#22223b]/10 text-white text-base outline-none"
            />
          </div>
        </label>
      </div>

      <button
        type="button"
        id="agregar-producto"
        class="bg-[#1b2a33] hover:shadow-cyan-500/40  text-white rounded-lg p-2 font-semibold"
      >
        ➕ Agregar otro producto
      </button>

      <p id="total" class="text-lg font-bold text-white mt-4">Total: $0.00</p>

      <label class="flex flex-col gap-1">
        Forma de pago:
        <select
          name="payment"
          required
          class="rounded-lg p-3 bg-[#22223b]/10 text-[#22223b] text-base outline-none"
        >
          <option value="">Selecciona una opción</option>
          <option value="Bancolombia">Bancolombia</option>
          <option value="Nequi">Nequi</option>
          <option value="Efectivo">Efectivo</option>
        </select>
      </label>

      <label class="flex flex-col gap-1">
        Mensaje adicional:
        <textarea
          name="message"
          class="rounded-lg p-3 bg-[#22223b]/10 text-white text-base outline-none resize-none"
          rows="3"
        ></textarea>
      </label>

      <label class="flex flex-col gap-1">
        Adjuntar comprobante (opcional):
        <input
          type="file"
          name="comprobante"
          id="comprobante"
          accept="image/*"
          class="rounded-lg p-2 bg-[#22223b]/10 text-white text-base outline-none"
        />
        <div id="comprobante-preview" class="text-gray-300 text-sm mt-2">
          <img id="comprobante-preview-img" src="" alt="preview" class="hidden max-w-xs max-h-40 rounded-md shadow-md" />
          <div id="comprobante-preview-name" class="text-gray-300 text-sm mt-2"></div>
        </div>
      </label>

      <button
        type="submit"
        class="bg-green-500 text-white rounded-lg p-3 font-bold cursor-pointer transition-colors hover:bg-green-600"
      >
        Enviar a WhatsApp
      </button>
      <p id="upload-status" class="text-sm text-gray-300 mt-2"></p>
    </form>
  </div>
</section>

<!-- Overlay de subida / spinner -->
<div id="upload-overlay" role="dialog" aria-modal="true" aria-live="polite" class="hidden fixed inset-0 z-50 items-center justify-center bg-black/60">
  <div class="flex flex-col items-center gap-4 bg-transparent p-4 rounded">
    <div class="w-16 h-16 border-4 border-white/30 border-t-white rounded-full animate-spin" aria-hidden="true"></div>
    <img id="upload-overlay-preview" src="" alt="miniatura comprobante" class="hidden max-w-xs max-h-40 rounded-md shadow-md" />
    <p id="upload-overlay-text" class="text-white text-sm">Procesando comprobante, espera...</p>
    <div class="pt-2">
      <button id="upload-cancel" class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded">Cancelar</button>
    </div>
  </div>
</div>

<style>
  /* Ocultar el botón Cancelar en dispositivos con puntero fino (PC) */
  @media (pointer: fine) {
    #upload-cancel { display: none; }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    let activeAbortController: AbortController | null = null;
    let activeNewWin: Window | null = null;
    let submitAborted = false;
    const container = document.getElementById("productos-container");
    const btnAgregar = document.getElementById("agregar-producto");
    const form = document.getElementById("contactForm");

    const precios = {
      "Aipods Pro 2": 55,
      "P9 Pro Max": 55,
      "Smartwatch 10 Ultra 2-GS": 55,
      "Cargador de Iphone": 55,
    };

    function calcularTotal() {
      if (!container) return 0;

      const productos = Array.from(container.querySelectorAll(".producto"));
      let total = 0;

      productos.forEach((p) => {
        const selectEl = p.querySelector("select[name='producto[]']") as HTMLSelectElement | null;
        const inputEl = p.querySelector("input[name='cantidad[]']") as HTMLInputElement | null;
        const producto = selectEl?.value;
        const cantidad = parseInt(inputEl?.value || "0", 10);

        if (typeof producto === "string" && producto in precios) {
          total += precios[producto as keyof typeof precios] * cantidad;
        }
      });

      const totalElement = document.getElementById("total");
      if (totalElement) {
        totalElement.textContent = `Total: $${total.toFixed(2)}`;
      }

      return total;
    }

    if (!container || !btnAgregar || !form) return;

    // listeners iniciales para selects e inputs ya presentes
    container.querySelectorAll(".producto").forEach(p => {
      const select = p.querySelector("select[name='producto[]']") as HTMLSelectElement | null;
      const input = p.querySelector("input[name='cantidad[]']") as HTMLInputElement | null;
      if (select) select.addEventListener("change", calcularTotal);
      if (input) input.addEventListener("input", calcularTotal);
    });

    const comprobantePreview = document.getElementById('comprobante-preview');
    const comprobanteInputInit = document.getElementById('comprobante') as HTMLInputElement | null;
    const comprobantePreviewImg = document.getElementById('comprobante-preview-img') as HTMLImageElement | null;
    const comprobantePreviewName = document.getElementById('comprobante-preview-name') as HTMLDivElement | null;
    const overlayPreviewImg = document.getElementById('upload-overlay-preview') as HTMLImageElement | null;
    if (comprobanteInputInit && comprobantePreview) {
      let currentObjectUrl: string | null = null;
      comprobanteInputInit.addEventListener('change', () => {
        const f = comprobanteInputInit.files && comprobanteInputInit.files.length ? comprobanteInputInit.files[0] : null;
        // limpiar previa anterior
        if (currentObjectUrl) {
          URL.revokeObjectURL(currentObjectUrl);
          currentObjectUrl = null;
        }
        if (!f) {
          if (comprobantePreviewImg) { comprobantePreviewImg.src = ''; comprobantePreviewImg.classList.add('hidden'); }
          if (comprobantePreviewName) comprobantePreviewName.textContent = '';
          return;
        }

        if (f.type.startsWith('image/')) {
          const url = URL.createObjectURL(f);
          currentObjectUrl = url;
          if (comprobantePreviewImg) { comprobantePreviewImg.src = url; comprobantePreviewImg.classList.remove('hidden'); }
          if (comprobantePreviewName) comprobantePreviewName.textContent = f.name;
          // show in overlay too
          if (overlayPreviewImg) { overlayPreviewImg.src = url; overlayPreviewImg.classList.remove('hidden'); }
        } else if (f.type === 'application/pdf') {
          if (comprobantePreviewImg) { comprobantePreviewImg.src = ''; comprobantePreviewImg.classList.add('hidden'); }
          if (comprobantePreviewName) comprobantePreviewName.textContent = `PDF: ${f.name}`;
          if (overlayPreviewImg) { overlayPreviewImg.src = ''; overlayPreviewImg.classList.add('hidden'); }
        } else {
          if (comprobantePreviewImg) { comprobantePreviewImg.src = ''; comprobantePreviewImg.classList.add('hidden'); }
          if (comprobantePreviewName) comprobantePreviewName.textContent = `Archivo: ${f.name}`;
        }
      });
    }

    btnAgregar.addEventListener("click", () => {
      const div = document.createElement("div");
      div.className = "producto flex gap-2";

      div.innerHTML = `
        <select name="producto[]" required class="rounded-lg p-3 bg-[#22223b]/10 text-[#22223b] text-base outline-none flex-1">
          <option value="">Selecciona tu producto</option>
          <option value="Aipods Pro 2">Airpods Pro 2</option>
          <option value="P9 Pro Max">P9 Pro Max</option>
          <option value="Smartwatch 10 Ultra 2-GS">Smartwatch 10 Ultra 2-GS</option>
          <option value="Cargador de Iphone">Cargador de Iphone</option>
        </select>

        <input type="number" name="cantidad[]" min="1" value="1" required class="w-24 rounded-lg p-3 bg-[#22223b]/10 text-white text-base outline-none" />

        <button type="button" class="eliminar bg-red-500/80 hover:bg-red-600 text-white px-3 rounded-lg">🗑️</button>
      `;

      container.appendChild(div);
      calcularTotal();

      const btnEliminar = div.querySelector(".eliminar");
      if (btnEliminar) {
        btnEliminar.addEventListener("click", () => {
          div.remove();
          calcularTotal();
        });
      }

      const select = div.querySelector("select[name='producto[]']") as HTMLSelectElement | null;
      const input = div.querySelector("input[name='cantidad[]']") as HTMLInputElement | null;
      if (select) select.addEventListener("change", calcularTotal);
      if (input) input.addEventListener("input", calcularTotal);
    });

    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      const submitBtn = form.querySelector("button[type='submit']") as HTMLButtonElement | null;
      if (submitBtn) { submitBtn.disabled = true; submitBtn.classList.add('opacity-60', 'cursor-not-allowed'); }
      // Abrir una ventana en la misma interacción de usuario para evitar bloqueos en móviles
      let newWin: Window | null = null;
      try {
        newWin = window.open('', '_blank');
      } catch (err) {
        newWin = null;
      }
      // store references for cancellation
      activeNewWin = newWin;
      submitAborted = false;
      const overlay = document.getElementById('upload-overlay');
      const overlayText = document.getElementById('upload-overlay-text');
      if (overlay) overlay.classList.remove('hidden'), overlay.classList.add('flex');

   const name = (form.querySelector("[name='name']") as HTMLInputElement).value;
const location = (form.querySelector("[name='location']") as HTMLInputElement).value;
const payment = (form.querySelector("[name='payment']") as HTMLSelectElement).value;
const message = (form.querySelector("[name='message']") as HTMLTextAreaElement).value;
    const comprobanteInput = form.querySelector("#comprobante") as HTMLInputElement | null;
    const comprobanteFile = comprobanteInput?.files && comprobanteInput.files.length ? comprobanteInput.files[0] : null;
    const uploadStatus = document.getElementById('upload-status');

    // Configuración opcional de subida. Rellena cloudName y uploadPreset para activar subida a Cloudinary.
    const UPLOAD_CONFIG = {
      provider: 'cloudinary', // 'cloudinary' or '' to disable
      cloudName: 'dhhs7htsz', // provided cloudName
      uploadPreset: 'M-Technology' // provided unsigned upload preset name
    };

    let comprobanteURL: string | null = null;

      const productos = Array.from(form.querySelectorAll(".producto")).map((p) => {
      const producto = ((p.querySelector("select[name='producto[]']") as HTMLSelectElement) || { value: "" }).value;
      const cantidad = ((p.querySelector("input[name='cantidad[]']") as HTMLInputElement) || { value: "1" }).value;

        return `${producto} (x${cantidad})`;
      });

      const productsText = productos.join(", ");
      const phone = "573019030729";

      // Si hay comprobante y la config está presente, intentar subir a Cloudinary (unsigned)
        const isImage = comprobanteFile ? comprobanteFile.type.startsWith('image/') : false;
        if (comprobanteFile && !isImage) {
          if (uploadStatus) uploadStatus.textContent = 'Solo se permiten imágenes para que aparezcan en la vista previa de WhatsApp.';
        }

        if (UPLOAD_CONFIG.provider === 'cloudinary' && UPLOAD_CONFIG.cloudName && UPLOAD_CONFIG.uploadPreset && comprobanteFile) {
          try {
            if (uploadStatus) uploadStatus.textContent = 'Preparando comprobante...';
            if (overlayText) overlayText.textContent = 'Preparando comprobante...';

            // Si es PDF: convertir primera página a imagen usando pdf.js
            let imageBlob: Blob | null = null;
            let pdfUploadUrl: string | null = null;

            if (!isImage && comprobanteFile.type === 'application/pdf') {
              // cargar pdf.js dinámicamente
              await new Promise<void>((resolve, reject) => {
                if ((window as any).pdfjsLib) return resolve();
                const s = document.createElement('script');
                s.src = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.14.305/pdf.min.js';
                s.onload = () => resolve();
                s.onerror = () => reject(new Error('No se pudo cargar pdf.js'));
                document.head.appendChild(s);
              });

              const pdfjsLib = (window as any).pdfjsLib;
              // establecer worker
              if (pdfjsLib && pdfjsLib.GlobalWorkerOptions) {
                pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.14.305/pdf.worker.min.js';
              }

              const arrayBuffer = await comprobanteFile.arrayBuffer();
              const loadingTask = pdfjsLib.getDocument({ data: arrayBuffer });
              const pdf = await loadingTask.promise;
              const page = await pdf.getPage(1);
              const scale = 2;
              const viewport = page.getViewport({ scale });
              const canvas = document.createElement('canvas');
              canvas.width = viewport.width;
              canvas.height = viewport.height;
              const ctx = canvas.getContext('2d');
              if (ctx) {
                const renderTask = page.render({ canvasContext: ctx, viewport });
                await renderTask.promise;
                const blob = await new Promise<Blob | null>((res) => canvas.toBlob(b => res(b), 'image/jpeg', 0.8));
                imageBlob = blob;
                // show overlay preview from the generated blob
                if (blob && overlayPreviewImg) {
                  try {
                    const obj = URL.createObjectURL(blob);
                    overlayPreviewImg.src = obj;
                    overlayPreviewImg.classList.remove('hidden');
                    // revoke later after short delay when redirecting
                    setTimeout(() => URL.revokeObjectURL(obj), 5000);
                  } catch (e) { /* ignore */ }
                }
              }
            }

            // Si ya es imagen, usamos el propio file como imageBlob
            if (isImage) imageBlob = comprobanteFile;

            // Subir imagen (thumbnail o misma imagen)
            if (imageBlob) {
              if (uploadStatus) uploadStatus.textContent = 'Subiendo miniatura del comprobante...';
              if (overlayText) overlayText.textContent = 'Subiendo comprobante...';
              const fdImg = new FormData();
              fdImg.append('file', imageBlob, 'comprobante.jpg');
              fdImg.append('upload_preset', UPLOAD_CONFIG.uploadPreset);
              // Usar AbortController para poder cancelar la subida
              activeAbortController = new AbortController();
              const respImg = await fetch(`https://api.cloudinary.com/v1_1/${UPLOAD_CONFIG.cloudName}/auto/upload`, { method: 'POST', body: fdImg, signal: activeAbortController.signal });
              const jsonImg = await respImg.json();
                if (jsonImg && jsonImg.secure_url) {
                  comprobanteURL = jsonImg.secure_url;
                  if (uploadStatus) uploadStatus.textContent = 'Miniatura subida.';
                  if (overlayText) overlayText.textContent = 'Miniatura subida.';
                }
                  // if imageBlob came from a local image file preview, keep overlay preview as-is; otherwise if we have comprobanteURL, set overlay preview to that URL
                  if (comprobanteURL && overlayPreviewImg) {
                    overlayPreviewImg.src = comprobanteURL;
                    overlayPreviewImg.classList.remove('hidden');
                  }
            }

            // No subimos el PDF original: solo usamos la miniatura generada para la vista previa en WhatsApp.

            if (comprobanteURL) {
              if (uploadStatus) uploadStatus.textContent = 'Comprobante subido.';
              if (overlayText) overlayText.textContent = 'Subida completa. Abriendo WhatsApp...';
            } else {
              if (uploadStatus) uploadStatus.textContent = 'No se pudo subir el comprobante; se enviará el nombre de archivo.';
              if (overlayText) overlayText.textContent = 'No se pudo subir el comprobante. Abriendo WhatsApp...';
            }

            // No subiremos el PDF original; solo la miniatura (comprobanteURL) se usará en el mensaje.

          } catch (err) {
            console.error(err);
            if (err && (err as any).name === 'AbortError') {
              // usuario canceló
              submitAborted = true;
              if (uploadStatus) uploadStatus.textContent = 'Subida cancelada.';
              if (overlayText) overlayText.textContent = 'Subida cancelada.';
            } else {
              if (uploadStatus) uploadStatus.textContent = 'Error subiendo comprobante; adjunta manualmente en el chat.';
              if (overlayText) overlayText.textContent = 'Error subiendo comprobante. Abriendo WhatsApp...';
            }
          } finally {
            activeAbortController = null;
          }
        }

      let comprobanteText = "No adjunta comprobante";
      // Si tenemos URL pública y es imagen, dejarla en su propia línea para favorecer preview en WhatsApp
      if (comprobanteURL) {
        comprobanteText = `Imagen comprobante:\n${comprobanteURL}`;
        // solo usamos la miniatura para la vista previa
      } else if (comprobanteFile) {
        comprobanteText = `Comprobante adjuntado: ${comprobanteFile.name} (adjuntar manualmente en el chat)`;
        if (UPLOAD_CONFIG.provider !== 'cloudinary' || !UPLOAD_CONFIG.cloudName || !UPLOAD_CONFIG.uploadPreset) {
          if (uploadStatus) uploadStatus.textContent = 'Para que la imagen aparezca automáticamente en el chat, configura una subida (Cloudinary) en el código.';
        }
      }

      const rawText = `Hola, soy ${name}.
Ubicación: ${location}
Productos: ${productsText}
Total: $${calcularTotal().toFixed(2)}
Forma de pago: ${payment}
Mensaje adicional: ${message}
${comprobanteText}`;

      const text = encodeURIComponent(rawText);
      const url = `https://wa.me/${phone.replace(/\D/g, "")}?text=${text}`;
      // Si el submit fue abortado por el usuario, cerrar la ventana abierta y ocultar overlay
      if (submitAborted) {
        if (activeNewWin && !activeNewWin.closed) {
          try { activeNewWin.close(); } catch (e) { /* ignore */ }
        }
        if (overlay) overlay.classList.remove('flex'), overlay.classList.add('hidden');
        // limpiar previews
        if (comprobantePreviewImg) { comprobantePreviewImg.src = ''; comprobantePreviewImg.classList.add('hidden'); }
        if (comprobantePreviewName) comprobantePreviewName.textContent = '';
        if (overlayPreviewImg) { overlayPreviewImg.src = ''; overlayPreviewImg.classList.add('hidden'); }
        if (submitBtn) { submitBtn.disabled = false; submitBtn.classList.remove('opacity-60', 'cursor-not-allowed'); }
        activeNewWin = null;
        return;
      }

      // Redirigir la ventana abierta inicialmente (fallback a navegar la misma pestaña si no se pudo abrir)
      try {
        if (newWin) {
          newWin.location.href = url;
          // dejamos el overlay visible unos instantes para indicar proceso; la nueva ventana tomará el foco
          setTimeout(() => {
            if (overlay) overlay.classList.remove('flex'), overlay.classList.add('hidden');
          }, 1500);
        } else {
          window.location.href = url;
        }
      } catch (err) {
        // En algunos navegadores asignar location puede fallar; usar fallback
        window.location.href = url;
      } finally {
        activeNewWin = null;
      }
    });

    // Handler del botón cancelar
    const cancelBtn = document.getElementById('upload-cancel');
    if (cancelBtn) {
      cancelBtn.addEventListener('click', () => {
        // marcar abortado
        submitAborted = true;
        if (activeAbortController) {
          try { activeAbortController.abort(); } catch (e) { /* ignore */ }
          activeAbortController = null;
        }
        // cerrar ventana si existe
        if (activeNewWin && !activeNewWin.closed) {
          try { activeNewWin.close(); } catch (e) { /* ignore */ }
        }
        // ocultar overlay
        const overlay = document.getElementById('upload-overlay');
        if (overlay) overlay.classList.remove('flex'), overlay.classList.add('hidden');
        const uploadStatus = document.getElementById('upload-status');
        if (uploadStatus) uploadStatus.textContent = 'Carga cancelada por el usuario.';
        // reactivar boton enviar
        const submitBtn = form.querySelector("button[type='submit']") as HTMLButtonElement | null;
        if (submitBtn) { submitBtn.disabled = false; submitBtn.classList.remove('opacity-60', 'cursor-not-allowed'); }
      });
    }

    // Recalcular total al cargar
    calcularTotal();
  });
</script>
